// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: defihub/financiamento/emprestimo.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/cosmos/gogoproto/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Emprestimo struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Valor   uint64 `protobuf:"varint,2,opt,name=valor,proto3" json:"valor,omitempty"`
	Prazo   uint64 `protobuf:"varint,3,opt,name=prazo,proto3" json:"prazo,omitempty"`
	Taxa    string `protobuf:"bytes,4,opt,name=taxa,proto3" json:"taxa,omitempty"`
	Devedor string `protobuf:"bytes,5,opt,name=devedor,proto3" json:"devedor,omitempty"`
	Credor  string `protobuf:"bytes,6,opt,name=credor,proto3" json:"credor,omitempty"`
}

func (m *Emprestimo) Reset()         { *m = Emprestimo{} }
func (m *Emprestimo) String() string { return proto.CompactTextString(m) }
func (*Emprestimo) ProtoMessage()    {}
func (*Emprestimo) Descriptor() ([]byte, []int) {
	return fileDescriptor_45620b30f3c5f31c, []int{0}
}
func (m *Emprestimo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Emprestimo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Emprestimo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Emprestimo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Emprestimo.Merge(m, src)
}
func (m *Emprestimo) XXX_Size() int {
	return m.Size()
}
func (m *Emprestimo) XXX_DiscardUnknown() {
	xxx_messageInfo_Emprestimo.DiscardUnknown(m)
}

var xxx_messageInfo_Emprestimo proto.InternalMessageInfo

func (m *Emprestimo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Emprestimo) GetValor() uint64 {
	if m != nil {
		return m.Valor
	}
	return 0
}

func (m *Emprestimo) GetPrazo() uint64 {
	if m != nil {
		return m.Prazo
	}
	return 0
}

func (m *Emprestimo) GetTaxa() string {
	if m != nil {
		return m.Taxa
	}
	return ""
}

func (m *Emprestimo) GetDevedor() string {
	if m != nil {
		return m.Devedor
	}
	return ""
}

func (m *Emprestimo) GetCredor() string {
	if m != nil {
		return m.Credor
	}
	return ""
}

func init() {
	proto.RegisterType((*Emprestimo)(nil), "defihub.financiamento.Emprestimo")
}

func init() {
	proto.RegisterFile("defihub/financiamento/emprestimo.proto", fileDescriptor_45620b30f3c5f31c)
}

var fileDescriptor_45620b30f3c5f31c = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4b, 0x49, 0x4d, 0xcb,
	0xcc, 0x28, 0x4d, 0xd2, 0x4f, 0xcb, 0xcc, 0x4b, 0xcc, 0x4b, 0xce, 0x4c, 0xcc, 0x4d, 0xcd, 0x2b,
	0xc9, 0xd7, 0x4f, 0xcd, 0x2d, 0x28, 0x4a, 0x2d, 0x2e, 0xc9, 0xcc, 0xcd, 0xd7, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x12, 0x85, 0xaa, 0xd3, 0x43, 0x51, 0xa7, 0xd4, 0xc7, 0xc8, 0xc5, 0xe5, 0x0a,
	0x57, 0x2b, 0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x12, 0xc4, 0x94,
	0x99, 0x22, 0x24, 0xc2, 0xc5, 0x5a, 0x96, 0x98, 0x93, 0x5f, 0x24, 0xc1, 0x04, 0x16, 0x82, 0x70,
	0x40, 0xa2, 0x05, 0x45, 0x89, 0x55, 0xf9, 0x12, 0xcc, 0x10, 0x51, 0x30, 0x47, 0x48, 0x88, 0x8b,
	0xa5, 0x24, 0xb1, 0x22, 0x51, 0x82, 0x45, 0x81, 0x51, 0x83, 0x33, 0x08, 0xcc, 0x16, 0x92, 0xe0,
	0x62, 0x4f, 0x49, 0x2d, 0x4b, 0x4d, 0xc9, 0x2f, 0x92, 0x60, 0x05, 0x0b, 0xc3, 0xb8, 0x42, 0x62,
	0x5c, 0x6c, 0xc9, 0x45, 0x60, 0x09, 0x36, 0xb0, 0x04, 0x94, 0xe7, 0xe4, 0x7f, 0xe2, 0x91, 0x1c,
	0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1,
	0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xa6, 0xe9, 0x99, 0x25, 0x20, 0x0f, 0x24, 0xe7, 0xe7,
	0xea, 0xa7, 0x27, 0x26, 0x15, 0x65, 0xa6, 0xe6, 0x14, 0x27, 0xe7, 0x97, 0x24, 0xea, 0xc3, 0x42,
	0xa0, 0x02, 0x2d, 0x0c, 0x4a, 0x2a, 0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0xfe, 0x37, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x4b, 0x74, 0xff, 0xe7, 0x29, 0x01, 0x00, 0x00,
}

func (m *Emprestimo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Emprestimo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Emprestimo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Credor) > 0 {
		i -= len(m.Credor)
		copy(dAtA[i:], m.Credor)
		i = encodeVarintEmprestimo(dAtA, i, uint64(len(m.Credor)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Devedor) > 0 {
		i -= len(m.Devedor)
		copy(dAtA[i:], m.Devedor)
		i = encodeVarintEmprestimo(dAtA, i, uint64(len(m.Devedor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Taxa) > 0 {
		i -= len(m.Taxa)
		copy(dAtA[i:], m.Taxa)
		i = encodeVarintEmprestimo(dAtA, i, uint64(len(m.Taxa)))
		i--
		dAtA[i] = 0x22
	}
	if m.Prazo != 0 {
		i = encodeVarintEmprestimo(dAtA, i, uint64(m.Prazo))
		i--
		dAtA[i] = 0x18
	}
	if m.Valor != 0 {
		i = encodeVarintEmprestimo(dAtA, i, uint64(m.Valor))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEmprestimo(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEmprestimo(dAtA []byte, offset int, v uint64) int {
	offset -= sovEmprestimo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Emprestimo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEmprestimo(uint64(m.Id))
	}
	if m.Valor != 0 {
		n += 1 + sovEmprestimo(uint64(m.Valor))
	}
	if m.Prazo != 0 {
		n += 1 + sovEmprestimo(uint64(m.Prazo))
	}
	l = len(m.Taxa)
	if l > 0 {
		n += 1 + l + sovEmprestimo(uint64(l))
	}
	l = len(m.Devedor)
	if l > 0 {
		n += 1 + l + sovEmprestimo(uint64(l))
	}
	l = len(m.Credor)
	if l > 0 {
		n += 1 + l + sovEmprestimo(uint64(l))
	}
	return n
}

func sovEmprestimo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEmprestimo(x uint64) (n int) {
	return sovEmprestimo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Emprestimo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmprestimo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Emprestimo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Emprestimo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmprestimo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valor", wireType)
			}
			m.Valor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmprestimo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Valor |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prazo", wireType)
			}
			m.Prazo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmprestimo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prazo |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taxa", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmprestimo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmprestimo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmprestimo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Taxa = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devedor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmprestimo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmprestimo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmprestimo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devedor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmprestimo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmprestimo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmprestimo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmprestimo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEmprestimo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEmprestimo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEmprestimo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEmprestimo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEmprestimo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEmprestimo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEmprestimo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEmprestimo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEmprestimo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEmprestimo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEmprestimo = fmt.Errorf("proto: unexpected end of group")
)
